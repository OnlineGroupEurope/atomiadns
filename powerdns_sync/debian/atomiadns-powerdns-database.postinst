#!/bin/sh

execname=`basename "$0"`
if [ x"$execname" = x"atomiadns-sync-powerdns-database" ]; then
	if [ -z "$1" ] || [ ! -f "$1" ] || ! grep gmysql-password "$1" > /dev/null; then
		echo "usage: $0 powerdns_config_file"
		exit 1
	else
		dbuser=`tr -d " \t" < "$1" | grep ^gmysql-user | cut -d "=" -f 2-`
		dbpass=`tr -d " \t" < "$1" | grep ^gmysql-password | cut -d "=" -f 2-`
		dbhost=`tr -d " \t" < "$1" | grep ^gmysql-host | cut -d "=" -f 2-`
		dbname=`tr -d " \t" < "$1" | grep ^gmysql-dbname | cut -d "=" -f 2-`
		mysql="mysql -u $dbuser -p$dbpass -h$dbhost"
		no_db_create=1
	fi
else
	mysql="mysql --defaults-file=/etc/mysql/debian.cnf"
	dbname="powerdns"
fi

if [ -f "/usr/share/atomiadns/powerdns.sql" ]; then
	schemafile="/usr/share/atomiadns/powerdns.sql"
elif [ -f "/usr/share/atomiadns/schema/powerdns.sql" ]; then
	schemafile="/usr/share/atomiadns/schema/powerdns.sql"
elif [ -f "/usr/local/share/atomiadns/schema/powerdns.sql" ]; then
	schemafile="/usr/local/share/atomiadns/schema/powerdns.sql"
else
	echo "error finding powerdns schema, you will have to create it manually."
	exit 1
fi

createschema() {
	if [ x"$no_db_create" != x"1" ]; then
		password=`dd if=/dev/urandom bs=1024 count=1 status=noxfer 2>/dev/null | sha1sum | cut -d " " -f 1`
		if [ -z "$password" ]; then
			echo "error generating random password"
			exit 1
		fi

		if [ ! -f "/etc/atomiadns.conf" ]; then
			if [ -f "/usr/share/atomia/conf/atomiadns.conf.atomiapowerdns-database" ]; then
				cp /usr/share/atomia/conf/atomiadns.conf.atomiapowerdns-database /etc/atomiadns.conf
			else
				echo "no config found"
				exit 1
			fi
		else
			if [ -z "$(grep "powerdns_db_hostname" /etc/atomiadns.conf)" ]; then
				cat /usr/share/atomia/conf/atomiadns.conf.atomiapowerdns-database >> /etc/atomiadns.conf
			fi
		fi

		db_username=`grep ^powerdns_db_username /etc/atomiadns.conf | awk '{ print $NF }'`
		db_password=`grep ^powerdns_db_password /etc/atomiadns.conf | awk '{ print $NF }'`

		if [ x"$db_password" != x"%password" ]; then
			password="$db_password"
		else
			TMPFILE=`mktemp /tmp/atomiadns.XXXXXXXXXX` || exit 1
			sed "s/%password/$password/g" < /etc/atomiadns.conf > "$TMPFILE" || exit 1
			mv "$TMPFILE" /etc/atomiadns.conf || exit 1
			chmod a+r /etc/atomiadns.conf || exit 1
		fi

		TMPFILE2=`mktemp /tmp/atomiadns.XXXXXXXXXX` || exit 1
		sed "s/%password/$password/g" < /usr/share/atomia/conf/pdns.conf > "$TMPFILE2" || exit 1
		mkdir -p /etc/powerdns || exit 1
		mv "$TMPFILE2" /etc/powerdns/pdns.conf || exit 1
		chmod a+r /etc/powerdns/pdns.conf || exit 1

		$mysql -e "CREATE DATABASE powerdns" > /dev/null 2>&1
		if [ $? != 0 ]; then
			echo "error creating database powerdns, you will have to make sure that the schema matches $schemafile manually"
			exit 1
		fi

		$mysql -e 'GRANT ALL ON powerdns.* TO `'"$db_username"'`@`localhost` IDENTIFIED BY '"'$password'" > /dev/null 2>&1
		if [ $? != 0 ]; then
			echo "error granting access to powerdns user, you will have to make sure that the schema matches $schemafile manually"
			exit 1
		fi
	fi

	grep -v DEFINER "$schemafile" | $mysql $dbname > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error importing schema, you will have to make sure that the schema matches $schemafile manually"
		exit 1
	fi
}

execute_query() {
	query="$1"

	$mysql $dbname -e "$query" > /dev/null 2>&1
	if [ $? != 0 ]; then
		echo "error executing migration query: $query, you'll have to migrate the schema manually."
		exit 1
	fi
}

set_schema_version() {
	execute_query "UPDATE powerdns_schemaversion SET version = $1"
}

db_exists=`$mysql -s -e "show databases like 'powerdns'"`
showdb_ret="$?"
if [ $showdb_ret = 0 ] && [ -n "$db_exists" ]; then

	schema_version=`$mysql $dbname -Nse "SELECT version FROM powerdns_schemaversion" 2> /dev/null`
	schema_check_ret="$?"

	if [ $schema_check_ret != 0 ] || [ -z "$schema_version" ]; then
		if [ x"$no_db_create" = x"1" ]; then
		        echo "No schema installed, installing into the precreated empty database $dbname."
		        createschema
		else
			echo "database powerdns already exist, but doesn't contain the atomiadns powerdns schema. You will have to make sure that the schema matches $schemafile manually"
			echo "if this is an upgrade that fails, and you know that powerdns worked before, then just do:"
			echo "$mysql $dbname -e 'CREATE TABLE powerdns_schemaversion (version INT); INSERT INTO powerdns_schemaversion VALUES (1)'"
			exit 1
		fi
	else
		latest_version="14"

		if [ "$schema_version" = "$latest_version" ]; then
			echo "The installed schema is the latest version ($latest_version), keeping the database as it is."
		elif [ -n "$(echo "$schema_version" | grep -E '^[0-9]+$')" ] && [ "$schema_version" -lt "$latest_version" ]; then
			echo "Schema version is $schema_version, and the latest database schema is version $latest_version. Upgrading."

			if [ "$schema_version" -lt 2 ]; then
				execute_query "ALTER TABLE domains CHANGE COLUMN id id bigint NOT NULL AUTO_INCREMENT"
				execute_query "ALTER TABLE records CHANGE COLUMN id id bigint NOT NULL AUTO_INCREMENT"
			fi

			if [ "$schema_version" -lt 5 ]; then
				execute_query 'CREATE TABLE `outbound_tsig_keys` (`id` bigint NOT NULL AUTO_INCREMENT, `domain_id` int(11) DEFAULT NULL, `secret` varchar(255) DEFAULT NULL, `name` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`), KEY `domain_index` (`domain_id`)) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=latin1'

				execute_query 'ALTER VIEW cryptokeys AS select `c`.`id` AS `id`,`d`.`id` AS `domain_id`,`c`.`flags` AS `flags`,`c`.`active` AS `active`,`c`.`content` AS `content` from (`domains` `d` join `global_cryptokeys` `c`) where d.type = '"'NATIVE'"

				execute_query "CREATE VIEW tsigkeys AS select CONCAT('key', k.id, ':', LOWER(k.name)) AS name, 'hmac-md5' AS algorithm, k.secret from outbound_tsig_keys k"
			fi

			if [ "$schema_version" -lt 7 ]; then
				execute_query 'ALTER VIEW domainmetadata AS select `domains`.`id` AS `domain_id`,`global_domainmetadata`.`kind` AS `kind`,`global_domainmetadata`.`content` AS `content` from (`domains` join `global_domainmetadata`) where ((select count(*) from global_cryptokeys) > 0 AND domains.type = '"'NATIVE') OR domains.type = 'MASTER' union select d.id, 'AXFR-MASTER-TSIG', CONCAT('key', k.id, ':', LOWER(k.name)) from outbound_tsig_keys k inner join domains d on k.domain_id = d.id where d.type = 'SLAVE'"
			fi

			if [ "$schema_version" -lt 8 ]; then
				execute_query "ALTER TABLE records CHANGE COLUMN content content text DEFAULT NULL"
			fi

			if [ "$schema_version" -lt 10 ]; then
				execute_query "
CREATE OR REPLACE VIEW domainmetadata AS
SELECT
  d.id AS domain_id,
  IF(d.type IN ('NATIVE', 'MASTER'), IF(g.kind IS NULL, gp.kind, g.kind), 'AXFR-MASTER-TSIG') AS kind,
  IF(d.type IN ('NATIVE', 'MASTER'),
    IF(g.kind IS NULL, gp.content, g.content),
    concat('key', k.id, ':', lcase(k.name))) AS content
FROM domains d
LEFT JOIN global_domainmetadata g ON d.type IN ('NATIVE', 'MASTER') AND
  (SELECT count(0) FROM global_cryptokeys) > 0
LEFT JOIN global_domainmetadata gp ON g.kind IS NULL AND d.type = 'MASTER' AND
  (SELECT count(0) FROM global_cryptokeys) = 0
LEFT JOIN outbound_tsig_keys k ON k.domain_id = d.id AND d.type = 'SLAVE'
WHERE d.type IN ('NATIVE', 'MASTER', 'SLAVE')"
			fi

			if [ "$schema_version" -lt 11 ]; then
				execute_query "DELETE FROM global_domainmetadata WHERE kind = 'NSEC3PARAM'"
			fi

			if [ "$schema_version" -lt 12 ]; then
				execute_query "DROP INDEX rec_name_index ON records"
				execute_query "CREATE INDEX recordorder ON records (domain_id, ordername)"
				execute_query "ALTER TABLE records ADD disabled TINYINT(1) DEFAULT 0 AFTER change_date"
				execute_query "ALTER TABLE records MODIFY content VARCHAR(64000) DEFAULT NULL"
				execute_query "ALTER TABLE records MODIFY ordername VARCHAR(255) BINARY DEFAULT NULL"
				execute_query "ALTER TABLE records MODIFY auth TINYINT(1) DEFAULT 1"
				execute_query "ALTER TABLE records MODIFY type VARCHAR(10)"
				execute_query "ALTER TABLE supermasters MODIFY ip VARCHAR(64) NOT NULL"
				execute_query "ALTER TABLE supermasters ADD PRIMARY KEY(ip, nameserver)"
				execute_query "ALTER TABLE supermasters MODIFY account VARCHAR(40) NOT NULL"
				execute_query "ALTER TABLE global_domainmetadata MODIFY kind VARCHAR(32)"
				execute_query "ALTER TABLE global_domainmetadata ENGINE=InnoDB"
				execute_query "ALTER TABLE global_cryptokeys ENGINE=InnoDB"
				execute_query "
CREATE TABLE comments (
  id                    INT AUTO_INCREMENT,
  domain_id             INT NOT NULL,
  name                  VARCHAR(255) NOT NULL,
  type                  VARCHAR(10) NOT NULL,
  modified_at           INT NOT NULL,
  account               VARCHAR(40) NOT NULL,
  comment               VARCHAR(64000) NOT NULL,
  PRIMARY KEY(id)
) Engine=InnoDB;"
				execute_query "CREATE INDEX comments_domain_id_idx ON comments (domain_id)"
				execute_query "CREATE INDEX comments_name_type_idx ON comments (name, type)"
				execute_query "CREATE INDEX comments_order_idx ON comments (domain_id, modified_at)"
			fi

			if [ "$schema_version" -lt 13 ]; then
				execute_query "
ALTER VIEW cryptokeys AS
  SELECT
    c.id AS id,
    d.id AS domain_id,
    c.flags AS flags,
    c.active AS active,
    c.content AS content
  FROM (
    domains d
    JOIN global_cryptokeys c
  )
  WHERE d.type IN ('NATIVE', 'MASTER')"
			fi

			if [ "$schema_version" -lt 14 ]; then
				execute_query "CREATE INDEX type_index ON domains(type)"
				execute_query "CREATE INDEX type_index ON records(type)"
				execute_query "ALTER TABLE outbound_tsig_keys ADD algorithm VARCHAR(16) DEFAULT 'hmac-md5' NOT NULL"
				execute_query "ALTER TABLE outbound_tsig_keys ADD add_prefix BOOL DEFAULT TRUE NOT NULL"
				execute_query "
ALTER VIEW tsigkeys AS
  SELECT
    IF(add_prefix, CONCAT('key', id, ':', LOWER(name)), name) AS name,
	algorithm,
	secret
  FROM outbound_tsig_keys"
            fi

			set_schema_version "$latest_version"
		else
			echo "database powerdns already exist, but contains a bad schema version ($schema_version), this should never happen and indicates a bug."
			exit 1
		fi
	fi
else
	echo "No schema installed, installing into powerdns."
	createschema
fi
